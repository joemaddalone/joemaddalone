---
import ExpLayout from "../../../layouts/ExpLayout.astro";
---

<ExpLayout pageTitle="Web Audio Code Generator" prism>
    <div class="container mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg">
            <div class="p-6">
                <div class="mb-4">
                    <h1 class="text-3xl font-bold text-gray-900">
                        Web Audio Code Generator
                    </h1>
                </div>
            </div>

            <div class="p-6 pt-0">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div class="space-y-6">
                        <div class="space-y-4">
                            <div
                                class="flex justify-between items-center border-b border-gray-300 pb-2 mb-4"
                            >
                                <div class="text-xl font-semibold text-gray-800">
                                    Controls
                                </div>
                            </div>

                            <div class="space-y-4">
                                <div class="space-y-2">
                                    <label for="oscillatorType" class="block text-sm font-medium text-gray-700"
                                        >Oscillator Type</label
                                    >
                                    <select
                                        id="oscillatorType"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    >
                                        <option value="sine">Sine</option>
                                        <option value="square">Square</option>
                                        <option value="sawtooth"
                                            >Sawtooth</option
                                        >
                                        <option value="triangle" selected
                                            >Triangle</option
                                        >
                                    </select>
                                </div>

                                <div class="space-y-2">
                                    <label for="startFrequency" class="block text-sm font-medium text-gray-700"
                                        >Start Frequency (<span
                                            id="startFreqValue">1200</span
                                        >Hz)</label
                                    >
                                    <div
                                        class="flex items-center justify-between"
                                    >
                                        <input
                                            type="range"
                                            id="startFrequency"
                                            min="50"
                                            max="2000"
                                            value="1200"
                                            step="50"
                                            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                                        />
                                    </div>
                                </div>

                                <div class="space-y-2">
                                    <label for="endFrequency" class="block text-sm font-medium text-gray-700"
                                        >End Frequency (<span id="endFreqValue"
                                            >300</span
                                        >Hz)</label
                                    >
                                    <div
                                        class="flex items-center justify-between"
                                    >
                                        <input
                                            type="range"
                                            id="endFrequency"
                                            min="50"
                                            max="2000"
                                            value="300"
                                            step="50"
                                            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                                        />
                                    </div>
                                </div>

                                <div class="space-y-2">
                                    <label for="startGain" class="block text-sm font-medium text-gray-700"
                                        >Start Gain (<span id="startGainValue"
                                            >0.5</span
                                        >)</label
                                    >
                                    <div
                                        class="flex items-center justify-between"
                                    >
                                        <input
                                            type="range"
                                            id="startGain"
                                            min="0"
                                            max="1"
                                            value="0.5"
                                            step="0.01"
                                            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                                        />
                                    </div>
                                </div>

                                <div class="space-y-2">
                                    <label for="endGain" class="block text-sm font-medium text-gray-700"
                                        >End Gain (<span id="endGainValue"
                                            >0.01</span
                                        >)</label
                                    >
                                    <div
                                        class="flex items-center justify-between"
                                    >
                                        <input
                                            type="range"
                                            id="endGain"
                                            min="0"
                                            max="1"
                                            value="0.01"
                                            step="0.01"
                                            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                                        />
                                    </div>
                                </div>

                                <div class="space-y-2">
                                    <label for="duration" class="block text-sm font-medium text-gray-700"
                                        >Duration (<span id="durationValue"
                                            >0.25</span
                                        >s)</label
                                    >
                                    <div
                                        class="flex items-center justify-between"
                                    >
                                        <input
                                            type="range"
                                            id="duration"
                                            min="0.1"
                                            max="2"
                                            value="0.25"
                                            step="0.05"
                                            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                                        />
                                    </div>
                                </div>

                                <div class="pt-2">
                                    <button
                                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200 ease-in-out"
                                        id="playBtn"
                                    >
                                        Play Sound
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-6">
                        <div class="space-y-4">
                            <div
                                class="flex justify-between items-center border-b border-gray-300 pb-2 mb-4"
                            >
                                <div class="text-xl font-semibold text-gray-800">
                                    Generated Code
                                </div>
                                <button
                                    class="bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-md transition duration-200 ease-in-out"
                                    id="copyBtn"
                                >
                                    Copy Code
                                </button>
                            </div>

                            <div
                                class="bg-gray-50 border border-gray-200 rounded-md p-4 font-mono text-sm"
                            >
                                <pre
                                    class="m-0 whitespace-pre-wrap overflow-x-auto">
                                    <code id="codeOutput" class="text-gray-800">// Your generated code will appear here</code>
                                </pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .slider::-webkit-slider-thumb {
            appearance: none;
            height: 20px;
            width: 20px;
            border-radius: 50%;
            background: #3b82f6;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            height: 20px;
            width: 20px;
            border-radius: 50%;
            background: #3b82f6;
            cursor: pointer;
            border: none;
        }
    </style>

    <script is:inline>
        const $ = (selector) => document.querySelector(selector);
        // Audio context for playing sounds
        let audioContext = null;

        // Get DOM elements
        const oscillatorType = $("#oscillatorType");
        const startFrequency = $("#startFrequency");
        const endFrequency = $("#endFrequency");
        const startGain = $("#startGain");
        const endGain = $("#endGain");
        const duration = $("#duration");
        const playBtn = $("#playBtn");
        const copyBtn = $("#copyBtn");
        const codeOutput = $("#codeOutput");

        // Update value displays
        function updateValueDisplays() {
            $("#startFreqValue").textContent = startFrequency.value;
            $("#endFreqValue").textContent = endFrequency.value;
            $("#startGainValue").textContent = startGain.value;
            $("#endGainValue").textContent = endGain.value;
            $("#durationValue").textContent = duration.value;
        }

        // Generate code based on current parameters
        function generateCode() {
            const code = `
try {
  const audioContext = new window.AudioContext();
  const ctx = audioContext;
  const osc = ctx.createOscillator();
  const gain = ctx.createGain();

  osc.type = "${oscillatorType.value}";
  osc.frequency.setValueAtTime(${startFrequency.value}, ctx.currentTime);
  osc.frequency.exponentialRampToValueAtTime(
      ${endFrequency.value},
      ctx.currentTime + ${duration.value},
  );

  gain.gain.setValueAtTime(${startGain.value}, ctx.currentTime);
  gain.gain.exponentialRampToValueAtTime(
      ${endGain.value},
      ctx.currentTime + ${duration.value},
  );

  osc.connect(gain);
  gain.connect(ctx.destination);
  osc.start();
  osc.stop(ctx.currentTime + ${duration.value});
} catch (e) {
    console.log("Audio playback failed:", e);
}`;

            codeOutput.innerHTML = `<code>${code}</code>`;
        }

        // Play sound with current parameters
        function playSound() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext ||
                        window.webkitAudioContext)();
                }

                const ctx = audioContext;
                const osc = ctx.createOscillator();
                const gain = ctx.createGain();

                osc.type = oscillatorType.value;
                osc.frequency.setValueAtTime(
                    parseFloat(startFrequency.value),
                    ctx.currentTime,
                );
                osc.frequency.exponentialRampToValueAtTime(
                    parseFloat(endFrequency.value),
                    ctx.currentTime + parseFloat(duration.value),
                );

                gain.gain.setValueAtTime(
                    parseFloat(startGain.value),
                    ctx.currentTime,
                );
                gain.gain.exponentialRampToValueAtTime(
                    parseFloat(endGain.value),
                    ctx.currentTime + parseFloat(duration.value),
                );

                osc.connect(gain);
                gain.connect(ctx.destination);
                osc.start();
                osc.stop(ctx.currentTime + parseFloat(duration.value));
            } catch (e) {
                console.log("Audio playback failed:", e);
            }
        }

        // Copy code to clipboard
        function copyCode() {
            const code = codeOutput.textContent;
            navigator.clipboard
                .writeText(code)
                .then(() => {
                    copyBtn.innerHTML = "Copied!";
                    copyBtn.classList.remove("bg-gray-100", "hover:bg-gray-200", "text-gray-700");
                    copyBtn.classList.add("bg-green-100", "text-green-700");
                    setTimeout(() => {
                        copyBtn.innerHTML = "Copy Code";
                        copyBtn.classList.remove("bg-green-100", "text-green-700");
                        copyBtn.classList.add("bg-gray-100", "hover:bg-gray-200", "text-gray-700");
                    }, 2000);
                })
                .catch((err) => {
                    console.error("Failed to copy code:", err);
                });
        }

        // Event listeners
        [
            oscillatorType,
            startFrequency,
            endFrequency,
            startGain,
            endGain,
            duration,
        ].forEach((element) => {
            element.addEventListener("input", () => {
                updateValueDisplays();
                generateCode();
            });
        });

        playBtn.addEventListener("click", playSound);
        copyBtn.addEventListener("click", copyCode);

        // Initialize
        updateValueDisplays();
        generateCode();
    </script>
</ExpLayout>
